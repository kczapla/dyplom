__author__ = 'perun'

import core.calculations as calc


class Circuit:
    def __init__(self, name, index=None, intensity=None, loss=0.002):
        """
        :param intensity: Intensity which network generate to the core
        :param index: Index of the network
        :param loss: The probability of losing call. Need for the calculation of the network resources
        """
        # Values into the gateway from the network
        self.intensity_voice_in = intensity
        self.links_in = 0
        self.pcm_in = 0
        self.r_in = 0
        self.dsp_in = 0

        self.flow_voice_in = 0
        self.flow_video_in = 0
        self.flow_be_in = 0

        self.flow_voice_in_list = []
        self.flow_video_in_list = []
        self.flow_be_in_list = []
        # For future implementation
        self.intensity_video_in = 0
        self.intensity_be_in = 0

        # Values out of the gateway to the network
        self.intensity_voice_out = 0
        self.links_out = 0
        self.pcm_out = 0
        self.r_out = 0
        self.dsp_out = 0
        self.flow_voice_out = 0
        # For future implementation
        self.flow_video_out = 0
        self.flow_be_out = 0
        self.intensity_video_out = 0
        self.intensity_be_out = 0

        # General values
        self.interest_row_voice = []
        self.interest_row_video = []
        self.interest_row_be = []
        self.index = index
        #self.name = "PSTN/ISDN/GSM " + str(index)
        if name:
            self.name = name
        else:
            self.name = 'PSTN/ISDN/GSM ' + str(self.index)
        self.loss = loss

        # Variables connected with codec
        self.lambda_g711 = 100
        self.lambda_g729 = 100

        # Protocols' heading load: 40[B], length of voice sample with g711 = 80B, total length of single package is
        # 50[B] = 8*120 [b] = 960
        self.package_length_g711 = 960

        # Protocols' heading load: 40[B], length of voice sample with g729 = 10B, total length of single package is
        # 50[B] = 8*50 [b] = 400
        self.package_length_g729 = 400

        self.chosen_voice_codec = ''
        # length of packages based on chosen codec
        self.package_voice_length = 0
        self.lambda_calculations = 0

        # number of voice package sent by this network
        self.no_voice_package_g711 = 0
        self.no_voice_package_g729 = 0

    def set_no_of_package(self, links, intensity):
        """
        Method is calculating number of packages sent by this network. It calculates them based on intensity with
        network create them and number of real links from network to the media gateway.
        :param links: n_r
        :param intensity: number oc packages created by the network in 1 second
        """
        self.no_voice_package = links * intensity

    #def set_package_length(self, codec):
    #    print('Setting circuit network package length and lambda, based on chosen codec.')
    #    if codec == 'g.711':
    #        print('Codec g.711 chosen.')
    #        # Protocols' heading load: 40[B], length of voice sample with g711 = 80B, total length of single package is
    #        # 50[B] = 8*120 [b] = 960
    #        self.package_voice_length = self.package_length_g711
    #        self.lambda_calculations = self.lambda_g711
    #        self.chosen_voice_codec = codec
    #
    #    elif codec == 'g.729':
    #        print('Codec g.729 chosen.')
    #        # Protocols' heading load: 40[B], length of voice sample with g729 = 10B, total length of single package is
    #        # 50[B] = 8*50 [b] = 400
    #        self.package_voice_length = self.package_length_g729
    #        self.lambda_calculations = self.lambda_g729
    #        self.chosen_voice_codec = codec

    def set_package_length_g711(self):
        """
        Setter for package length g711

        """
        self.package_voice_length = self.package_length_g711
        self.chosen_voice_codec = 'g711'

    def set_package_length_g729(self):
        """
        Setter for package length g729

        """
        self.package_voice_length = self.package_length_g729
        self.chosen_voice_codec = 'g729'

    def set_flow_voice_in(self, networks=None):

        """
        Setter for a flow generated by current network to the core network
        :param networks: list of created networks in project
        """
        for net in networks:

            if type(net) is Circuit:
                tmp = (self.interest_row_voice[net.index] *
                       self.r_in *
                       self.lambda_g711 *
                       self.package_length_g711)

                self.no_voice_package_g711 += self.r_in * self.lambda_g711 * self.interest_row_voice[net.index]

                self.flow_voice_in += tmp
                self.flow_voice_in_list.append(tmp)

                self.flow_video_in_list.append(0)
                self.flow_be_in_list.append(0)
            else:
                tmp = (self.interest_row_voice[net.index] *
                       self.r_in *
                       self.lambda_g729 *
                       self.package_length_g729)

                self.no_voice_package_g729 += self.r_in * self.lambda_g729 * self.interest_row_voice[net.index]

                self.flow_voice_in += tmp
                self.flow_voice_in_list.append(tmp)

                self.flow_video_in_list.append(0)
                self.flow_be_in_list.append(0)
        #for network in networks:
        #    tmp = (self.interest_row_voice[network.index] *
        #           self.r_in *
        #           self.lambda_g711 *
        #           self.package_voice_length)
        #
        #    self.flow_voice_in += tmp
        #    self.flow_voice_in_list.append(tmp)

    def set_flow_voice_out(self, networks=None):

        """
        Setter for a flow which is coming to the network from all networks in bps
        :param networks: list of created networks in project
        """
        for net in networks:
                self.flow_voice_out += net.flow_voice_in_list[self.index]

    #For future implementations
    def set_flow_video_in(self, networks=None):
        pass

    def set_flow_video_out(self, networks=None):
        pass

    def set_flow_be_in(self, networks=None):
        pass

    def set_flow_be_out(self, networks=None):
        pass

    def input_resources(self):
        """
        Method is calculating input (to the core network) resources on the edge of the network. It's using methods from
        calculation module.
        """
        self.links_in = calc.erlang_first_formula(self.intensity_voice_in, self.loss)
        self.pcm_in = calc.pcm_lines(self.links_in)
        self.r_in = calc.real_links(self.pcm_in)
        self.dsp_in = calc.dsp(self.r_in)
        #self.set_no_of_package(self.r_in, self.lambda_calculations)

    def output_resources(self):
        """
        Method is calculating output (from the core network) resources on the edge of the network. It's using methods
        from calculation module.
        """
        self.links_out = calc.erlang_first_formula(self.intensity_voice_out, self.loss)
        self.pcm_out = calc.pcm_lines(self.links_out)
        self.r_out = calc.real_links(self.pcm_out)
        self.dsp_out = calc.dsp(self.r_out)

    def reset_resources(self):

        #Values out of the gateway to the network
        """

        Method reset calculated values
        """
        self.intensity_voice_out = 0
        self.links_out = 0
        self.pcm_out = 0
        self.r_out = 0
        self.dsp_out = 0
        self.flow_voice_out = 0
        self.interest_row_voice = []
        self.interest_row_video = []
        self.interest_row_be = []

        self.flow_voice_in_list = []
        self.flow_video_in_list = []
        self.flow_be_in_list = []

    def set_intensity_voice_out(self, networks=None):
        """
        Method is counting the output intensity of the network.
        :param networks: list of all created networks in the core
        """
        for x in networks:
            if type(x) is Circuit:
                self.intensity_voice_out += x.intensity_voice_in * x.interest_row_voice[self.index]
            else:
                self.intensity_voice_out += x.get_intensity_voice_g729_out() * x.interest_row_voice[self.index]

    def set_index(self, index):
        self.index = index
        #self.set_name()

    def set_name(self, name):
        self.name = name

    def edit_network(self, name, intensity, loss):
        """
        Method implements network with new values
        :param name: new name for network
        :param intensity: Voice intensity [Erl]
        :param loss: probability of loss
        """
        if name:
            self.name = name
        self.intensity_voice_in = intensity
        self.loss = loss
        print('New values of circuit networks instance setup successfully.')

    def test(self):
        print(self.chosen_voice_codec)
        print(self.package_voice_length)

        self.edit_network('szwesta', 345, 0.002)

        print(self.chosen_voice_codec)
        print(self.package_voice_length)

    def test_no2(self):
        #self.__init__('adam', 0, 205, 0.002, 'g.711')
        self.input_resources()
        print(self.r_in)
        print(self.no_voice_package)


class Package:
    def __init__(self, name, index=None, intensity_voice=0, intensity_video=0, intensity_be=0,
                 video_package_length=0, be_package_length=0):
        """

        :param name: Name of the instance
        :param intensity_video: video intensity
        :param intensity_be: be intensity
        :param video_package_length: average length of video single package given in [kB]
        :param be_package_length: average length of be single package [kB]
        :param intensity_voice: Intensity which network generate to the core
        :param index: Index of the network
        """
        #Values into the core network from access network
        self.intensity_voice_in = intensity_voice
        self.intensity_video_in = intensity_video
        self.intensity_be_in = intensity_be
        self.flow_voice_in_list = []
        self.flow_video_in_list = []
        self.flow_be_in_list = []

        #Variables describing flow out the IP network for different types of traffic
        self.flow_voice_in = 0
        self.flow_video_in = 0
        self.flow_be_in = 0
        #this value is used to process with Circuit networks
        self.intensity_in = self.intensity_voice_in/100

        #Values from the core network to the access network
        self.intensity_voice_out = 0
        self.intensity_video_out = 0
        self.intensity_be_out = 0

        self.intensity_out = 0

        #Variables describing flow into the IP network for different types of traffic
        self.flow_voice_out = 0
        self.flow_video_out = 0
        self.flow_be_out = 0

        #General values
        self.interest_row_voice = []
        self.interest_row_video = []
        self.interest_row_be = []
        self.index = index
        #self.name = "Dostęp IP " + str(index)
        if name:
            self.name = name
        else:
            self.name = 'IP ' + str(self.index)
        self.loss = 0

        # Variables connected with codec
        self.lambda_g711 = 100
        self.lambda_g729 = 100

        # Protocols' heading load: 40[B], length of voice sample with g711 = 80B, total length of single package is
        # 50[B] = 8*120 [b] = 960
        self.package_length_g711 = 960

        # Protocols' heading load: 40[B], length of voice sample with g729 = 10B, total length of single package is
        # 50[B] = 8*50 [b] = 400
        self.package_length_g729 = 400

        # Protocols' heading load: 40[B], default length of video sample with h264 = 1000B, total length of single
        # package is 1040[B] = 8*1040 [b] =  8320
        self.package_length_h264 = (video_package_length + 40) * 8

        # Protocols' heading load: 40[B], length for BE = 1500,  total length of single package is
        # 1540[B] = 8*1540 [b] = 12320
        self.package_length_be = (be_package_length + 40) * 8

        self.chosen_voice_codec = ''
        self.package_voice_length = 0
        self.lambda_calculations = 0

        #self.set_package_length(codec)

        self.chosen_video_codec = 'h.264'
        self.chosen_be_protocol = 'http'

        self.no_voice_package_g711 = 0
        self.no_voice_package_g729 = 0
        self.no_video_package = 0
        self.no_be_package = 0

        self.set_no_of_package()

    def set_no_of_package(self):
        """
        Method is setting the number of packets of the type sent by this network
        """
        self.no_voice_package_g729 = self.intensity_voice_in
        self.no_video_package = self.intensity_video_in
        self.no_be_package = self.intensity_be_in

    def set_package_length(self, codec):
        print('Setting circuit network package length and lambda, based on chosen codec.')
        if codec == 'g.711':
            print('Codec g.711 chosen.')
            # Protocols' heading load: 40[B], length of voice sample with g711 = 80B, total length of single package is
            # 50[B] = 8*120 [b] = 960
            self.package_voice_length = self.package_length_g711
            self.lambda_calculations = self.lambda_g711
            self.chosen_voice_codec = codec

        elif codec == 'g.729':
            print('Codec g.729 chosen.')
            # Protocols' heading load: 40[B], length of voice sample with g729 = 10B, total length of single package is
            # 50[B] = 8*50 [b] = 400
            self.package_voice_length = self.package_length_g729
            self.lambda_calculations = self.lambda_g729
            self.chosen_voice_codec = codec

    def set_flow_voice_in(self, networks=None):

        """
        Setter for a voice flow generated by current network to the core network
        :param networks: list of created networks in project
        """
        for net in networks:

            tmp = (self.interest_row_voice[net.index] *
                   self.intensity_voice_in *
                   self.package_length_g729)

            self.flow_voice_in += tmp
            self.flow_voice_in_list.append(tmp)

    def set_flow_voice_out(self, networks=None):

        """
        Setter for a voice flow which is coming to the network from all networks in bps
        :param networks: list of created networks in project
        """
        for net in networks:
                self.flow_voice_out += net.flow_voice_in_list[self.index]

    def set_flow_video_in(self, networks=None):

        """
        Setter for a video flow generated by current network to the core network
        :param networks: list of created networks in project
        """
        for net in networks:

            tmp = (self.interest_row_video[net.index] *
                   self.intensity_video_in *
                   self.package_length_h264)

            self.flow_video_in += tmp
            self.flow_video_in_list.append(tmp)

    def set_flow_video_out(self, networks=None):

        """
        Setter for a video flow which is coming to the network from all networks in bps
        :param networks: list of created networks in project
        """
        for net in networks:
            if type(net) is Package:
                self.flow_video_out += net.flow_video_in_list[self.index]

    def set_flow_be_in(self, networks=None):
        """
        Setter for a be flow generated by current network to the other networks network
        :param networks: list of created networks in project
        """
        for net in networks:
            tmp = (self.interest_row_be[net.index] *
                   self.intensity_be_in *
                   self.package_length_be)
            self.flow_be_in += tmp
            self.flow_be_in_list.append(tmp)

    def set_flow_be_out(self, networks=None):

        """
        Setter for a be flow which is coming to the network from all networks in bps
        :param networks: list of created networks in project
        """
        for net in networks:
            if type(net) is Package:
                self.flow_be_out += net.flow_be_in_list[self.index]

    def reset_resources(self):

        """
        Method reset calculated values

        """
        #Values from the core network to the access network
        self.intensity_out = 0

        self.flow_voice_in = 0
        self.flow_video_in = 0
        self.flow_be_in = 0

        self.flow_voice_in_list = []
        self.flow_video_in_list = []
        self.flow_be_in_list = []

        self.intensity_voice_out = 0
        self.intensity_video_out = 0
        self.intensity_be_out = 0

        self.flow_voice_out = 0
        self.flow_video_out = 0
        self.flow_be_out = 0

        self.interest_row_voice = []
        self.interest_row_video = []
        self.interest_row_be = []

    def set_intensity_voice_in(self, n):
        """
        Setter for a voice intensity
        :param n: New value given by user
        """
        self.intensity_voice_in = n

    def get_intensity_voice_g729_out(self):
        """
        Getter of an intensity towards PSTN network

        :return: processed instensity special for PSTN demandings
        """
        return self.intensity_voice_in/self.lambda_g729

    def set_index(self, index):

        """
        Setter for index_networks variable
        :param index:
        """
        self.index = index
        # self.set_name()

    def set_name(self, name):
        """
        Setter for a name variable
        :param name: new name
        """
        self.name = name

    def out_intensity(self):
        pass

    def edit_network(self, name, intensity_voice_in, intensity_video_in, intensity_be_in,
                     voice_codec, video_package_length, be_package_length):
        """
        Method implements network with new values
        :param intensity_voice_in: voice packages intensity
        :param intensity_video_in: video packages intensity
        :param intensity_be_in: be packages intensity
        :param name: new name for network
        """
        if name:
            self.name = name
        self.intensity_voice_in = intensity_voice_in
        self.intensity_video_in = intensity_video_in
        self.intensity_be_in = intensity_be_in
        self.set_package_length(voice_codec)
        self.package_length_h264 = (video_package_length + 40) * 8
        self.package_length_be = (be_package_length + 40) * 8
        print('New values of package networks instance setup successfully.')

    def test(self):
        print(self.chosen_voice_codec)
        print(self.package_voice_length)
        print(self.chosen_video_codec)
        print(self.package_length_h264)
        print(self.chosen_be_protocol)
        print(self.package_length_be)

        self.edit_network('ikso', 12000, 13000, 14000, 'g.711', 0, 1500)

        print(self.chosen_voice_codec)
        print(self.package_voice_length)
        print(self.chosen_video_codec)
        print(self.package_length_h264)
        print(self.chosen_be_protocol)
        print(self.package_length_be)

    def test_no2(self):
        print(self.no_voice_package_g729, self.no_video_package, self.no_be_package)

if __name__ == '__main__':
    xc = Package('szwesta', 1, 123, 234, 345, 1000, 900)
    # print('-----------------------------------------------------')
    # xc.test()
    # print('+++++++++++++++++++++++++++++++++++++++++++++++++++++')
    #xz = Circuit('adam', 0, 240, 0.002, 'g.711')
    # print('-----------------------------------------------------')
    # xz.test()

    xc.test_no2()